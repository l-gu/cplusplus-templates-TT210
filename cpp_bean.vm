/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
$generator.generate($target.entityName ,  "${entity.name}.hpp", $target.folder, "hpp_bean.vm"  )

${SHARP}include "${entity.name}.hpp"
#if ( $entity.hasCompositePrimaryKey() )
${SHARP}include "${entity.name}Key.hpp"
#end
using namespace std;

#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author Telosys Tools Generator
 *
 */

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
	${entity.name}::${entity.name}()
	{
#if ( $entity.hasCompositePrimaryKey() )        
		this->compositePrimaryKey = new ${entity.name}Key();       
#end
	}

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
 #foreach( $field in $entity.keyAttributes )
  #if ( $field.setter )	void ${entity.name}::${field.setter}( $field.type.toLowerCase() $field.name )
    {
        this->compositePrimaryKey.${field.setter}( $field.name ) ;
    }
  #end
  #if ( $field.getter )	$field.type.toLowerCase() ${entity.name}::${field.getter}()
    {
        return this->compositePrimaryKey.${field.getter}() ;
    }
  #end
 #end
#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
 #foreach( $field in $entity.keyAttributes )
  #if ( $field.setter )	void ${entity.name}::${field.setter}( $field.type.toLowerCase() $field.name )
    {
        this->$field.name = $field.name ;
    }
  #end
  #if ( $field.getter )	$field.type.toLowerCase() ${entity.name}::${field.getter}()
    {
        return this->$field.name;
    }
  #end
 #end
#end

	//----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	//----------------------------------------------------------------------
#foreach( $field in $dataFields )
 #if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
 #end
 #if ( $field.setter )	void ${entity.name}::${field.setter}( $field.type.toLowerCase() $field.name )
    {
        this->$field.name = $field.name;
    }
 #end
 #if ( $field.getter )	$field.type.toLowerCase() ${entity.name}::${field.getter}()
    {
        return this->$field.name;
    }
 #end

#end  
