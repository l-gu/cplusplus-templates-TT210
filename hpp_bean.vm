/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Key.cpp", $target.folder, "cpp_bean_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end

${SHARP}include <iostream>
using namespace std;

#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author Telosys Tools Generator
 *
 */

class $entity.name
{
    private:
    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
    $field.formatedType(10).toLowerCase() $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

	public:
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
    ${entity.name}Key compositePrimaryKey ;

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
 #foreach( $field in $entity.keyAttributes )
    $field.formatedType(10).toLowerCase() $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
 #end
#end

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    ${entity.name}();
    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
 #foreach( $field in $entity.keyAttributes )
  #if ( $field.setter )    void ${field.setter}( $field.type.toLowerCase() $field.name );
  #end
  #if ( $field.getter )    $field.type.toLowerCase() ${field.getter}();
  #end
 #end
#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
 #foreach( $field in $entity.keyAttributes )
  #if ( $field.setter )    void ${field.setter}( $field.type.toLowerCase() $field.name );
  #end
  #if ( $field.getter )    $field.type.toLowerCase() ${field.getter}();
  #end
 #end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
 #if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
 #end
 #if ( $field.setter )    void ${field.setter}( $field.type.toLowerCase() $field.name );
 #end
 #if ( $field.getter )    $field.type.toLowerCase() ${field.getter}();
 #end
#end  

};
